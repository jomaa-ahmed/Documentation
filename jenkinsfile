pipeline {
    agent any
    
    tools {
        nodejs 'nodejs'
        dockerTool 'docker'
    }

    environment {
        imageName = "myapp"
        registryCredentials = "Nexus"
        registry = "172.18.0.3:8085"
        dockerImage = ''
    }

    stages {
        stage('Clone') {
            steps {
                git branch: 'main', url: 'https://github.com/Ahmedjomaa55/Documentation.git'
            }
        }

        stage('install dependency') {
            steps {
                sh 'npm install'
            }
        }

        stage('Build') {
            steps {
                sh 'npm run build'
            }
        }
        
        stage('sonrqube'){
            agent { 
                docker { 
                    image 'sonarsource/sonar-scanner-cli' 
                    args '-v /var/run/docker.sock:/var/run/docker.sock --network documentation_devops'
                } 
            }
            steps{
                   // sh 'sonar-scanner   -Dsonar.projectKey=a   -Dsonar.sources=.   -Dsonar.host.url=http://172.18.0.4:9000   -Dsonar.token=sqp_1d1cf157fdec8dcc21e9aa8bbd243e66eb444f8a'
             
             sh '''
             
              sonar-scanner \
               -Dsonar.projectKey=a \
               -Dsonar.sources=. \
               -Dsonar.host.url=http://sonarqube:9000 \
               -Dsonar.login=admin \
               -Dsonar.password=admin12
             '''
                }
            
        }




        stage('Quality Gate') {
            steps {
                 sh 'echo build'
                 
                //     waitForQualityGate abortPipeline: true
                 
            }
        }

        stage('dockerize the app') {
            steps {
                sh 'echo dockerize'
            
               // script {
                   // dockerImage = docker.build(imageName)
                // }
            }
        }

        stage('Uploading to Nexus') {
            steps {
                    sh 'docker login 172.18.0.3:8085 -u admin -p admin'
                    sh 'docker tag 293f70881acd 172.18.0.3:8085/sfeneriya:v1'
                    sh 'docker push 172.18.0.3:8085/sfeneriya:v1'
            }
        }
        
        stage('pull from nexus' ) {
            steps {
                sh 'docker pull 172.18.0.3:8085/sfeneriya:v1'
            }
            
        }
    
        stage('Ansible Playbook') {
            steps {
                withCredentials([file(credentialsId: 'ansibleprivatekey3', variable: 'SERVICE_ACCOUNT_KEY')]) {
                    sh '''
                    ls
                    cat hosts
                    cat ${SERVICE_ACCOUNT_KEY} > go.pem
                    chmod 400 go.pem
                    ansible-playbook --user=ubuntu --private-key=go.pem docker.yml -i hosts
                    '''
                }
            }
        }
    }
}

